#!./gawkldr utils.awk
#
# VitaminA IRC bot core
#
# Copyright PÅ™emysl Janouch 2009 - 2010. All rights reserved.
# See the file LICENSE for licensing information.
#
# Long live, GAWK
#
#

BEGIN \
{
	print "VitaminA IRC bot 2.0"

	config["datadir"] = ENVIRON["HOME"] "/.vitamina"
	loadconfig()

	if (!config["irchost"] || !config["ircport"] \
		|| !config["nickname"] || !config["username"] || !config["fullname"])
	{
		print "Error: My configuration is not complete."
		print "Copy the example configuration file \"" \
			prefix "/share/vitamina/vitamina.conf\"\nto \"" \
			config["datadir"] "\" and make the required changes to it."
		exit
	}

	RS = "\r\n"
	ORS = RS

	loadplugins()

	# Register to the server
	print("Connecting to " config["irchost"] ":" config["ircport"] "...")
	ircfile = "/inet/tcp/0/" config["irchost"] "/" config["ircport"]
	print("NICK " config["nickname"]) |& ircfile
	print("USER " config["username"] " 8 * :" config["fullname"]) |& ircfile
	ircready = 0

	# Run a message loop
	while ((ircfile |& getline) > 0)
	{
		parse($0)

		# Clone (It may get overwritten
		# in processserver().)
		delete mxparam
		for (x in mparam)
			mxparam[x] = mparam[x]
		mxwho = mwho
		mxcmd = mcmd

		processserver()
	}
}

function loadconfig (    i, ret, key, value, filepath)
{
	print "Loading configuration..."

	if (config["datadir"])
	{
		filepath = config["datadir"] "/vitamina.conf"
		while ((ret = (getline < filepath)) > 0)
		{
			# Comments and empty lines
			if (/^#/ || !/.=/)
				continue

			i = index($0, "=")
			key = substr($0, 1, i - 1)
			value = substr($0, i + 1)
			config[key] = value
		}
		if (ret == -1)
			print "Error while reading \"" filepath "\"."
	}
}

function loadplugins (    parr, p)
{
	# Split the 'plugins' variable (that we got from command
	# line arguments) at commas into an array.
	split(config["plugins"], parr, ",")
	for (p in parr)
	{
		print "Loading plugin: " parr[p] "..."
		if (loadplugin(parr[p]))
			print "An error occured while trying to load the plugin."
	}
}

function loadplugin (name,    harr, h, r)
{
	# Already loaded
	if (name in plugins)
		return -1

	# When a plugin is being loaded, it must print out
	# the commands that should be forwarded to it.
	r = (("./" name) |& getline h)
	if (r == 0)
		close("./" name)
	if (r < 1)
		return -1

	# The commands are separated with a space.
	split(toupper(h), harr, " ")

	# Set the plugin as a handler for the commands
	for (h in harr)
	{
		if (length(handlers[harr[h]]))
			handlers[harr[h]] += "," name
		else
			handlers[harr[h]] = name
	}
	plugins[name] = 1
	return 0
}

function unloadplugin (name,    h)
{
	# Not loaded
	if (!(name in plugins))
		return -1

	# Go through the handlers and remove the plugin
	# from everywhere.
	for (h in handlers)
	{
		gsub("(^|,)" name "(,|$)", ",", handlers[h])
		gsub("(^,|,$)", "", handlers[h])
	}
	close("./" name)
	delete plugins[name]
	return 0
}

# Decide whether this user can command me
function isadmin (who,    a)
{
	if (!config["admin"] || who ~ config["admin"])
		return 1
	return 0
}

function processplugin (name, text,    plugfile, i, out)
{
	# Read one line, process it, repeat
	plugfile = "./" name
	print text |& plugfile
	while (1)
	{
		i = plugfile |& getline out
		if (i <= 0)
		{
			print "Error in plugin " name ", disabling it"
			unloadplugin(name)
			break
		}
		# An empty line means "end of input for now"
		if (!length(out))
			break
		parse(out)

		# Special messages
		if (mcmd == "VITAMINA")
		{
			if (mparam[0] == "getconfig")
				print config[mparam[1]] |& plugfile
			else if (mparam[0] == "print")
				print mparam[1]
		}
		else
			# Forward everything else to the IRC server
			print out |& ircfile
	}
}

function processserver (    i, s, t, sent)
{
	# Forward the message to plugins
	t = handlers["ALL"] "," handlers[mxcmd]
	gsub("(^,|,,|,$)", "", t)

	split(t, s, ",")
	for (t in s)
	{
		# Never send a message to a single
		# plugin more than once
		if (s[t] in sent)
			continue
		sent[s[t]] = 1

		processplugin(s[t], $0)
	}

	if (mxcmd == "PING")
		print ("PONG :" mxparam[0]) |& ircfile
	else if (!ircready && mxcmd == "MODE")
	{
		print "Successfully connected"

		ircready = 1
		print ("JOIN :" config["autojoin"]) |& ircfile
	}
	else if (mxcmd == "PRIVMSG")
	{
		if (mxparam[1] ~ /^\!/ && isadmin(mxwho))
		{
			split(substr(mxparam[1], match(mxparam[1], \
				/ |$/)), s, " ")

			if (mxparam[1] == "!quit")
				print ("QUIT") |& ircfile
			else if (mxparam[1] ~ /^!join/)
			{
				for (t in s)
					print ("JOIN " s[t]) |& ircfile
			}
			else if (mxparam[1] ~ /^!part/)
			{
				for (t in s)
					print ("PART " s[t]) |& ircfile
			}
			else if (mxparam[1] ~ /^!(re)?load/)
			{
				for (t in s)
					handleloadrequest()
			}
			else if (mxparam[1] ~ /^!unload/)
			{
				for (t in s)
					handleunloadrequest()
			}
		}
	}
}

function handleloadrequest ()
{
	if (mxparam[1] ~ /^!reload/)
	{
		print("Reloading plugin: " s[t] "...")
		unloadplugin(s[t])
	}
	else
		print("Loading plugin: " s[t] "...")

	if (loadplugin(s[t]))
	{
		pmrespond("Plugin " s[t] " failed to load")
		print("Plugin " s[t] " failed to load.")
	}
	else
	{
		pmrespond("Plugin " s[t] " loaded")
		print("Plugin " s[t] " loaded.")
	}
}

function handleunloadrequest ()
{
	print("Unloading plugin: " s[t] "...")
	if (unloadplugin(s[t]))
	{
		pmrespond("Plugin " s[t] " not loaded")
		print("Plugin " s[t] " not loaded.")
	}
	else
	{
		pmrespond("Plugin " s[t] " unloaded")
		print("Plugin " s[t] " unloaded.")
	}
}

function pmrespond (text,    nick)
{
	match(mxwho, /^[^@!]+/)
	nick = substr(mxwho, RSTART, RLENGTH)

	if (mxparam[0] !~ /^#/)
		print ("PRIVMSG " nick " :" text) |& ircfile
	else
		print ("PRIVMSG " mxparam[0] " :" nick ": "text) |& ircfile

}

